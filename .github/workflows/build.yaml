name: Build Android APK

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-22.04

    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk

    steps:
    # Checkout source code
    - name: Checkout code
      uses: actions/checkout@v4

    # Caching pip dependencies
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Install system dependencies with retries
    - name: Install system dependencies
      run: |
        set -e
        for i in {1..3}; do
          sudo apt-get update && sudo apt-get install -y git zip unzip openjdk-17-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo6 cmake libffi-dev libssl-dev wget && break || sleep 10
        done

    # Verify git installation robustly
    - name: Verify git installation
      run: |
        set -e
        if ! which git; then
          echo "Git not found!"; exit 1
        fi
        git --version

    # Setup Python robustly
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    # Upgrade pip and install Buildozer and dependencies with retries
    - name: Install Buildozer and dependencies
      run: |
        set -e
        for i in {1..3}; do
          python -m pip install --upgrade pip && \
          pip install --no-cache-dir buildozer cython==0.29.33 virtualenv && break || sleep 10
        done

    # Download Android Command Line Tools robustly
    - name: Download Android Command Line Tools
      run: |
        set -e
        mkdir -p ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools
        for i in {1..3}; do
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip && break || sleep 10
        done
        unzip -q cmdline-tools.zip -d ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools
        rm cmdline-tools.zip
        mv ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/cmdline-tools ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest

    # Accept SDK licenses robustly
    - name: Accept Android SDK licenses
      run: |
        set -e
        yes | ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin/sdkmanager --sdk_root=${{ env.ANDROID_SDK_ROOT }} --licenses || true

    # Install Android platforms and tools robustly
    - name: Install Android platforms and tools
      run: |
        set -e
        for i in {1..3}; do
          ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin/sdkmanager --sdk_root=${{ env.ANDROID_SDK_ROOT }} \
            "platforms;android-33" \
            "build-tools;33.0.0" \
            "platform-tools" \
            "ndk;25.1.8937393" && break || sleep 10
        done

    # Verify build-tools and aidl robustly
    - name: Verify build-tools and aidl
      run: |
        set -e
        AIDL_PATH="${{ env.ANDROID_SDK_ROOT }}/build-tools/33.0.0/aidl"
        if [ ! -f "$AIDL_PATH" ]; then
          echo "AIDL not found at $AIDL_PATH, build-tools installation failed!"
          ls -l "${{ env.ANDROID_SDK_ROOT }}/build-tools/33.0.0/"
          exit 1
        else
          echo "AIDL found at $AIDL_PATH."
          $AIDL_PATH --version || echo "AIDL executable is present."
        fi

    # Build APK dengan Buildozer dan verifikasi file APK
    - name: Build with Buildozer
      env:
        ANDROIDSDK: ${{ env.ANDROID_SDK_ROOT }}
        ANDROID_NDK_HOME: ${{ env.ANDROID_SDK_ROOT }}/ndk/25.1.8937393
        PATH: /usr/bin:${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin:${{ env.ANDROID_SDK_ROOT }}/platform-tools:${{ env.ANDROID_SDK_ROOT }}/build-tools/33.0.0:$PATH
      run: |
        set -e
        echo "Verifying git is available..."
        which git
        git --version
        echo "Verifying aidl is available..."
        which aidl || echo "aidl should be available in build-tools"
        echo "Start buildozer..."
        for i in {1..3}; do
          buildozer -v android debug && break || sleep 10
        done
        echo "Verifying APK output..."
        if ls -l bin/*.apk; then
          echo "APK build success!"
        else
          echo "APK not found. Build failed!"
          exit 1
        fi

    # Upload APK
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app
        path: bin/*.apk
